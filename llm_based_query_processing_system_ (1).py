# -*- coding: utf-8 -*-
"""LLM Based Query Processing System .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19690-N7-rjsId_5IJCNsMHYiropCKEpU
"""



"""LLM Based Query Processing System"""

# importing sample files
import os
os.chdir('/content')
samples = ['S1.pdf','S2.pdf','S3.pdf','S4.pdf','S5.pdf']
for file_name in samples:
  file_path = os.path.join(os.getcwd(),file_name)
  print(f'Processing:{file_path}')

# installing required libraries
!pip install langchain
!pip install openai
!pip install faiss-cpu
!pip install pdfplumber

# extracting text from sample files
import pdfplumber

def extract_text_from_pdf(file_path):
    text = ""
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

pdf_texts = []
for file_name in ['S1.pdf', 'S2.pdf', 'S3.pdf', 'S4.pdf', 'S5.pdf']:
    path = os.path.join('/content', file_name)
    text = extract_text_from_pdf(path)
    pdf_texts.append({"file_name": file_name, "text": text})

!pip install langchain_community

!pip install sentence-transformers

# make chunk of text and embedded them

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.schema import Document
from langchain.embeddings import HuggingFaceEmbeddings

# split text into chunks
text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)

documents = []
for item in pdf_texts:
    chunks = text_splitter.create_documents([item["text"]])
    for doc in chunks:
        doc.metadata["source"] = item["file_name"]
        documents.append(doc)

# load HuggingFace Embeddings
embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# create Vector Store using FAISS
vectorstore = FAISS.from_documents(documents, embedding_model)

!pip install huggingface_hub

# setting emvironment for Hugging Face API with token
import os
os.environ["HUGGINGFACEHUB_API_TOKEN"] = "your-huggingface-api-token"

from transformers import pipeline

# load the model
llm = pipeline("text2text-generation", model="google/flan-t5-base")

# give input
query = "46-year-old male, knee surgery in Pune, 3-month-old insurance policy"

# create the prompt
prompt = f"Based on the scenario: {query}, should the insurance claim be approved or rejected? Explain."

#  the response
response = llm(prompt, max_new_tokens=100)

# print the output
print(response[0]["generated_text"])

# semantic document search
retrieved_docs = vectorstore.similarity_search("Is knee surgery covered under 3-month-old policy for 46M in Pune?", k=5)

# Combine top-k similar chunks into one context
context = "\n\n".join([doc.page_content for doc in retrieved_docs])

# Original query
query = "Is knee surgery covered under 3-month-old policy for 46M in Pune?"

# Full prompt combining context and query
full_prompt = f"""Context:
{context}

Query:
{query}

Based on the above context, should the insurance claim be approved or rejected? Explain clearly."""

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from sentence_transformers import SentenceTransformer

# Load the same embedding model
model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")

# Embed all document chunks (you already have them in `documents`)
text_chunks = [doc.page_content for doc in documents]
doc_embeddings = model.encode(text_chunks)

# Define the query and embed it
query = "46-year-old male, knee surgery in Pune, 3-month-old insurance policy"
query_embedding = model.encode(query)

# Find best match using cosine similarity
def find_best_match(query_embedding, document_embeddings, documents):
    similarities = cosine_similarity([query_embedding], document_embeddings)[0]
    best_match_index = np.argmax(similarities)
    return documents[best_match_index], similarities[best_match_index]

# Run matching
matched_text, score = find_best_match(query_embedding, doc_embeddings, text_chunks)

# Output result
print("Best matched clause:\n", matched_text)
print("Similarity score:", score)

from graphviz import Digraph


dot = Digraph(comment='LLM Insurance Workflow', format='png')
dot.attr(rankdir='TB', size='4,2')
dot.attr(dpi='300')

# Input
dot.node('A', 'Input PDF Files\n(S1.pdf - S5.pdf)', shape='folder', style='filled', fillcolor='lightgray')

# Step 1: Extract Text
dot.node('B', 'Extract Text using\npdfplumber', shape='box', style='filled', fillcolor='lightblue')

# Step 2: Text Chunking
dot.node('C', 'Split Text into Chunks\n(RecursiveCharacterTextSplitter)', shape='box', style='filled', fillcolor='lightblue')

# Step 3: Create Embeddings
dot.node('D', 'Generate Embeddings\n(HuggingFace)', shape='box', style='filled', fillcolor='lightyellow')

# Step 4: Store in VectorDB
dot.node('E', 'Store in FAISS Vector Store', shape='cylinder', style='filled', fillcolor='orange')

# Step 5: Query Input
dot.node('F', 'User Query:\n"Is knee surgery covered..."', shape='note', style='filled', fillcolor='lightpink')

# Step 6: Semantic Search
dot.node('G', 'Retrieve Relevant Docs\n(Vector Similarity Search)', shape='box', style='filled', fillcolor='lightgreen')

# Step 7: Clause Matching
dot.node('H', 'Clause Matching via\nCosine Similarity', shape='box', style='filled', fillcolor='lightgreen')

# Step 8: LLM Reasoning
dot.node('I', 'LLM Response\n(FLAN-T5)', shape='oval', style='filled', fillcolor='lightgoldenrod')

# Output
dot.node('J', 'Structured Decision\n+ Justification (JSON)', shape='parallelogram', style='filled', fillcolor='lavender')

# Edges
dot.edges([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E')])
dot.edge('F', 'G')
dot.edge('E', 'G')
dot.edge('G', 'H')
dot.edge('H', 'I')
dot.edge('I', 'J')

# Render
dot.render('/content/llm_workflow_diagram', view=True)

from IPython.display import Image
Image('/content/llm_workflow_diagram.png')

from graphviz import Digraph
from IPython.display import Image

dot = Digraph(comment='LLM-Based Query Processing Architecture', format='png')
dot.attr(rankdir='TB', size='2,6')  # TB = Top to Bottom
dot.attr(dpi='150')

# Input Layer
dot.node('A', 'User Query\n(Natural Language)', shape='note', style='filled', fillcolor='lightpink')

# Step 1: Query Parsing with LLM
dot.node('B', 'LLM Parser\n(Extract Structured Info)', shape='box', style='filled', fillcolor='lightyellow')

# Step 2: Embedding Search
dot.node('C', 'Semantic Search\n(FAISS / Pinecone)', shape='cylinder', style='filled', fillcolor='orange')

# Step 3: Clause Matching
dot.node('D', 'Clause Matching\n(Cosine Similarity)', shape='box', style='filled', fillcolor='lightblue')

# Step 4: Logic Evaluation
dot.node('E', 'Logic Evaluation Engine\n(Eligibility & Rules)', shape='box', style='filled', fillcolor='lightgreen')

# Step 5: LLM Reasoning
dot.node('F', 'LLM Response Generator\n(FLAN-T5 or GPT)', shape='ellipse', style='filled', fillcolor='lightgoldenrod')

# Step 6: Output
dot.node('G', 'Final Output\n(Structured JSON + Justification)', shape='parallelogram', style='filled', fillcolor='lavender')

# Connect flow
dot.edge('A', 'B')
dot.edge('B', 'C')
dot.edge('C', 'D')
dot.edge('D', 'E')
dot.edge('E', 'F')
dot.edge('F', 'G')

# Render and show
dot.render('/content/llm_architecture_diagram', view=False)
Image('/content/llm_architecture_diagram.png')

# output generation using JSON
import json

# Example values (replace with actual results from your system)
query = "Is knee surgery covered under 3-month-old policy for 46M in Pune?"
decision = "Rejected"
justification = ("The policy requires a minimum waiting period of 6 months before coverage "
                 "for orthopedic surgeries like knee surgery. The user has only held the policy for 3 months.")
matched_clause_text = ("Coverage for orthopedic surgeries including knee replacement will only be applicable "
                       "after a minimum waiting period of 6 months from the start of the policy.")
similarity_score = 0.84

# Build the JSON response as a dictionary
final_output = {
    "query": query,
    "decision": decision,
    "justification": justification,
    "matched_clause": {
        "text": matched_clause_text,
        "similarity_score": round(similarity_score, 2)
    },
    "policy_applicable": False,
    "location": "Pune",
    "age": 46,
    "gender": "Male"
}

# Print the JSON in pretty format
print(json.dumps(final_output, indent=4))

with open("llm_final_output.json", "w") as f:
    json.dump(final_output, f, indent=4)

# checking my model works properly or not

print(text_chunks[:2]) # checking extracting text in proper way or not
print(len(doc_embeddings)) # ckecking embeddings and vector score

print("Best matched clause:", matched_text) # checking clause matching output
print("Similarity score:", score)

print("Input to LLM:", prompt) # checking LLM resoning
print("Output from LLM:", response)

import json
print(json.dumps(final_output, indent=4)) # checking JSON file structure

"""**Model Making**"""

from sklearn.model_selection import train_test_split

all_cases = [
    {"query": "Is knee surgery covered under a 3-month-old policy for 46M in Pune?", "expected_decision": "Approved"},
    {"query": "Is cosmetic surgery covered?", "expected_decision": "Rejected"},
    {"query": "Is cataract surgery approved under this policy?", "expected_decision": "Approved"},
    {"query": "Is dental cleaning covered under the policy?", "expected_decision": "Rejected"},
    {"query": "Does the policy cover hospitalization due to accident?", "expected_decision": "Approved"},
    {"query": "Is Lasik eye surgery reimbursed?", "expected_decision": "Rejected"},
    {"query": "Can a 6-month-old policy cover appendix surgery?", "expected_decision": "Approved"},
    {"query": "Is gym membership fee claimable?", "expected_decision": "Rejected"},
]


train_cases, test_cases = train_test_split(all_cases, test_size=0.3, random_state=42)

from transformers import pipeline

# Initialize the LLM pipeline (you can change the model if needed)
pipe = pipeline("text-generation", model="google/flan-t5-base", tokenizer="google/flan-t5-base", max_new_tokens=50)

from sklearn.metrics import accuracy_score

y_true = []
y_pred = []

for case in test_cases:
    query = case["query"]
    expected = case["expected_decision"]

    retrieved_docs = vectorstore.similarity_search(query, k=5)
    retrieved_text = " ".join([doc.page_content for doc in retrieved_docs])

    query_embedding = model.encode(query)
    matched_text, score = find_best_match(query_embedding, doc_embeddings, text_chunks)

    prompt_input = f"""
    Clause: {matched_text}
    Query: {query}

    Answer in one word only: Approved or Rejected.
    """

    response = pipe(prompt_input)[0]["generated_text"].strip()

    # Normalize
    if "approved" in response.lower():
        response = "Approved"
    elif "rejected" in response.lower():
        response = "Rejected"
    else:
        response = "Rejected"

    y_true.append(expected.strip().capitalize())
    y_pred.append(response.strip().capitalize())

    print("✔ Query:", query)
    print("✔ Expected:", expected)
    print("✔ Predicted:", response)
    print("---")

# Accuracy
acc = accuracy_score(y_true, y_pred)
print(f"\n Accuracy: {acc * 100:.2f}%")

# confusin matrix
from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y_true, y_pred))
print(classification_report(y_true, y_pred))

prompt_input = f"""
You are a policy assistant. Based on the clause and the user's query, answer strictly with one word: Approved or Rejected.

Examples:
Clause: Surgery is not covered under policies less than 6 months old.
Query: Is surgery allowed in a 3-month-old policy?
Answer: Rejected

Clause: We allow coverage for patients aged above 45 in Pune.
Query: Is a 46-year-old from Pune eligible for claim?
Answer: Approved

Now answer this:
Clause: {matched_text}
Query: {query}
Answer:"""

response = pipe(prompt_input)[0]["generated_text"].strip().split()[0]  # First word only

# Normalize
if "approved" in response.lower():
    response = "Approved"
elif "rejected" in response.lower():
    response = "Rejected"
else:
    response = "Rejected"  # Default if LLM goes off

print("Query:", query)
print("Expected:", expected)
print("Predicted:", response)

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_true, y_pred)
print(f"Final Accuracy: {acc*100:.2f}%")

"""Improving Accuracy"""

train_data = [
    {
        "clause": "Ambulance charges are covered up to ₹2000 per incident.",
        "query": "Can I claim ₹1500 for ambulance service?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Only generic medicines are reimbursed under the policy.",
        "query": "Will a branded antibiotic prescription be covered?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "No claim bonus is available only after 1 claim-free year.",
        "query": "Will I get a bonus if I make a claim this year?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Cancer treatments are fully covered including chemotherapy.",
        "query": "Is chemotherapy included for breast cancer?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Daycare procedures are covered if hospitalization is under 24 hours.",
        "query": "Is cataract surgery covered under daycare?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Hearing aids are not part of the covered devices.",
        "query": "Can I claim for hearing aid expenses?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Organ transplant expenses are covered for both donor and recipient.",
        "query": "Is liver donor surgery cost included?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Coverage is denied for injuries from participation in adventure sports.",
        "query": "Will my rock climbing injury be reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Hospital room rent is capped at ₹3000 per day.",
        "query": "Can I claim for a room that costs ₹2800 per day?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Only treatments at network hospitals are covered.",
        "query": "Is treatment at a non-network hospital reimbursable?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "COVID-19 hospitalization is covered under this policy.",
        "query": "Will ICU charges for COVID be paid?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy does not cover self-inflicted injuries.",
        "query": "Will treatment for a self-harm incident be reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Rehabilitation expenses are covered for up to 30 days post-surgery.",
        "query": "Will physiotherapy for 25 days after surgery be covered?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policyholder must disclose all pre-existing conditions.",
        "query": "Can I claim if I didn't disclose asthma earlier?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Vaccinations for children under 5 years are reimbursed.",
        "query": "Can I claim my 3-year-old's polio vaccination?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Travel expenses for treatment abroad are not covered.",
        "query": "Will airfare to the US for surgery be reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Coverage starts 30 days after policy purchase.",
        "query": "Can I claim within 15 days of buying the policy?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Policy covers second opinion consultation fees.",
        "query": "Is the ₹500 I spent for a second doctor’s opinion reimbursed?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Only surgeries performed by certified specialists are covered.",
        "query": "Is surgery by a general physician covered?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Alternative treatments like Ayurveda and Homeopathy are covered up to ₹15,000.",
        "query": "Can I claim ₹10,000 for Ayurveda treatment?",
        "expected_decision": "Approved"
    },
    {
        "clause": "The policy excludes congenital diseases from coverage.",
        "query": "Can I claim for my child's congenital heart defect surgery?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Treatment for STDs is not covered under this policy.",
        "query": "Is HIV treatment included?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "No claims are accepted without a valid prescription.",
        "query": "Can I claim for over-the-counter medicines?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Medical expenses during overseas travel are covered under international rider.",
        "query": "Is my emergency hospitalization in Germany covered?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Home nursing is reimbursed only after hospitalization.",
        "query": "Can I claim for home nurse care after surgery?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Blood tests are covered only when prescribed by a physician.",
        "query": "Can I claim for tests I took voluntarily?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Cashless hospitalization is available in all metro cities.",
        "query": "Can I avail cashless facility in Mumbai?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy provides coverage for ICU charges separately up to ₹10,000/day.",
        "query": "Is my ₹9000 ICU bill per day reimbursable?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Medical negligence cases are not covered by this policy.",
        "query": "Can I claim for a wrong surgery done by the doctor?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Spouse and children are covered under the family floater plan.",
        "query": "Is my wife’s maternity hospitalization included?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Dental treatments are covered only in case of accidents.",
        "query": "Can I claim for a regular root canal treatment?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Hospitalization due to alcohol or drug abuse is not covered.",
        "query": "Can I claim for liver issues due to alcohol?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Vaccination against COVID-19 is covered once per year.",
        "query": "Can I claim for my second COVID booster shot?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Cosmetic procedures are not covered unless medically necessary.",
        "query": "Will a nose reshaping surgery be reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "ICU coverage is available for a maximum of 10 days.",
        "query": "Can I claim for 8 days of ICU treatment?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Maternity benefits include delivery and prenatal checkups.",
        "query": "Is ultrasound during pregnancy covered?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy does not cover infertility treatments.",
        "query": "Can I claim for IVF expenses?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Mental health consultations are covered up to ₹5000/year.",
        "query": "Can I claim ₹2000 for a psychiatrist appointment?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Coverage is not applicable during policy lapse.",
        "query": "Will a claim during an expired policy be reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Telemedicine consultations are covered under outpatient care.",
        "query": "Is my video consultation with a doctor reimbursable?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Outpatient treatments are reimbursed up to ₹10000 annually.",
        "query": "Can I claim ₹9500 for outpatient visits?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Ambulance services are not covered during overseas travel.",
        "query": "Can I claim ambulance charges in the UK?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Glasses and contact lenses are not covered under the policy.",
        "query": "Can I claim for my new eyeglasses?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "In-patient physiotherapy is covered post-surgery.",
        "query": "Can I claim for physiotherapy while admitted?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Claim submission must be done within 30 days post-treatment.",
        "query": "Can I submit my claim 25 days after discharge?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Diagnostic scans are reimbursed if linked to hospitalization.",
        "query": "Is my MRI covered without admission?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Maternity claims have a waiting period of 9 months.",
        "query": "Can I claim for delivery within 6 months of policy start?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Annual health checkup is reimbursed up to ₹2000.",
        "query": "Can I claim ₹1800 for preventive tests?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy covers cancer screening once a year.",
        "query": "Can I claim for breast cancer screening this year?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Post-hospitalization expenses are reimbursed for 60 days.",
        "query": "Can I claim for medicines bought 45 days after discharge?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Expenses from participation in riots are not covered.",
        "query": "Will I get reimbursed for injuries in a protest?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Vaccination side effects are covered up to ₹5000.",
        "query": "Can I claim ₹3000 for reaction to a flu shot?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy covers pre-existing diseases after 2 years of continuous coverage.",
        "query": "Can I claim diabetes-related expenses after 3 years?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy covers chemotherapy sessions but not travel expenses.",
        "query": "Can I claim for both chemo and transport?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Claims for illness due to nuclear exposure are not covered.",
        "query": "Is treatment for radiation poisoning reimbursed?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Routine health supplements are not covered.",
        "query": "Can I claim for multivitamins I purchased?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Policy covers emergency air ambulance within India.",
        "query": "Can I claim air ambulance from Delhi to Bangalore?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Hospital registration charges are not covered.",
        "query": "Can I claim ₹200 for hospital registration fees?",
        "expected_decision": "Rejected"
    },
    {
        "clause": "Accidental injuries are covered up to ₹2 lakh.",
        "query": "Can I claim ₹1.8 lakh for a bike accident?",
        "expected_decision": "Approved"
    },
    {
        "clause": "Policy covers surgical implants like pacemakers.",
        "query": "Is my pacemaker cost reimbursable?",
        "expected_decision": "Approved"
    }
]

!pip install --upgrade transformers

from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from datasets import Dataset
import torch
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

# Step 1: Extended 65-Sample Dataset
train_data = [
    {"clause": "All expenses are covered under the policy.", "query": "Is dental treatment covered?", "label": "Approved"},
    {"clause": "Cosmetic surgeries are not covered.", "query": "Is face lift surgery included?", "label": "Rejected"},
    {"clause": "Routine checkups are excluded.", "query": "Can I get reimbursement for annual physicals?", "label": "Rejected"},
    {"clause": "Accidental hospitalizations are included.", "query": "Is a bike accident claim valid?", "label": "Approved"},
    {"clause": "Pre-existing conditions are not covered for the first year.", "query": "Can I claim for diabetes in the first month?", "label": "Rejected"},
    {"clause": "Maternity expenses are covered after a 9-month waiting period.", "query": "Is pregnancy covered after 10 months?", "label": "Approved"},
    {"clause": "Mental health treatment is included in the policy.", "query": "Will therapy for anxiety be reimbursed?", "label": "Approved"},
    {"clause": "OPD consultations are not reimbursable.", "query": "Can I claim the consultation charges?", "label": "Rejected"},
    {"clause": "Daycare procedures are covered.", "query": "Is cataract surgery covered?", "label": "Approved"},
    {"clause": "Alternative therapies like Ayurveda and Homeopathy are included.", "query": "Can I claim for Ayurvedic treatment?", "label": "Approved"},
    {"clause": "Vaccination charges are not covered.", "query": "Is polio vaccination reimbursed?", "label": "Rejected"},
    {"clause": "COVID-19 treatment is covered as per IRDAI norms.", "query": "Will hospitalization for COVID-19 be covered?", "label": "Approved"},
    {"clause": "Dental treatments are only covered if arising from accidents.", "query": "Can I claim for routine dental cleaning?", "label": "Rejected"},
    {"clause": "Ambulance charges up to ₹2000 are covered.", "query": "Will ₹2500 ambulance bill be reimbursed?", "label": "Rejected"},
    {"clause": "Organ donor expenses are covered.", "query": "Can I claim for liver donor surgery?", "label": "Approved"},
    {"clause": "Obesity-related treatments are excluded.", "query": "Is bariatric surgery reimbursed?", "label": "Rejected"},
    {"clause": "Policy covers hospitalization beyond 24 hours.", "query": "Can I claim for 10-hour stay?", "label": "Rejected"},
    {"clause": "Cancer treatment is included.", "query": "Will chemotherapy expenses be reimbursed?", "label": "Approved"},
    {"clause": "Home nursing expenses are included.", "query": "Is home ICU care covered?", "label": "Approved"},
    {"clause": "Preventive health checkups up to ₹1500 per year are reimbursed.", "query": "Can I claim ₹2000 for checkup?", "label": "Rejected"},
    {"clause": "Air ambulance is not included.", "query": "Can I claim helicopter ambulance charges?", "label": "Rejected"},
    {"clause": "ICU charges are capped at ₹5000 per day.", "query": "Can I get ₹6000 ICU claim?", "label": "Rejected"},
    {"clause": "Diagnostic tests are covered if prescribed during hospitalization.", "query": "Can I claim MRI done during admission?", "label": "Approved"},
    {"clause": "Hospital cash benefit of ₹1000 per day is available.", "query": "Can I get ₹3000 for 3 days stay?", "label": "Approved"},
    {"clause": "Second opinion for critical illnesses is covered.", "query": "Will opinion from another doctor be reimbursed?", "label": "Approved"},
    {"clause": "Dental implants are not covered.", "query": "Can I claim tooth implant expenses?", "label": "Rejected"},
    {"clause": "Policy covers blood transfusion charges.", "query": "Can I claim for blood units used?", "label": "Approved"},
    {"clause": "Claim for alcohol-related treatment is not payable.", "query": "Is liver treatment due to drinking covered?", "label": "Rejected"},
    {"clause": "HIV/AIDS treatment is excluded.", "query": "Can I get reimbursement for AIDS medicines?", "label": "Rejected"},
    {"clause": "Plastic surgery is not payable unless due to accident.", "query": "Is breast reconstruction covered?", "label": "Rejected"},
    {"clause": "Policy covers burns treatment.", "query": "Can I claim treatment for fire burns?", "label": "Approved"},
    {"clause": "Rehabilitation expenses are not covered.", "query": "Is physical therapy post-surgery included?", "label": "Rejected"},
    {"clause": "Policy includes ICU and ventilator support.", "query": "Can I claim ICU ventilator bill?", "label": "Approved"},
    {"clause": "Vaccinations for travel are not covered.", "query": "Is yellow fever vaccine reimbursed?", "label": "Rejected"},
    {"clause": "Teleconsultation is included under OPD.", "query": "Can I claim online doctor visit?", "label": "Approved"},
    {"clause": "Policy excludes congenital diseases.", "query": "Can I claim for congenital heart defect?", "label": "Rejected"},
    {"clause": "In-patient hospitalization is necessary for claims.", "query": "Can I claim for outpatient surgery?", "label": "Rejected"},
    {"clause": "Cardiac surgeries are covered.", "query": "Is bypass surgery included?", "label": "Approved"},
    {"clause": "Policy covers pacemaker implantation.", "query": "Can I claim for pacemaker insertion?", "label": "Approved"},
    {"clause": "Joint replacement is covered after 3 years.", "query": "Is knee replacement covered in 2nd year?", "label": "Rejected"},
    {"clause": "Policy covers dialysis sessions.", "query": "Can I claim for kidney dialysis?", "label": "Approved"},
    {"clause": "Policy excludes infertility treatments.", "query": "Can I claim IVF expenses?", "label": "Rejected"},
    {"clause": "Policy covers cancer-related hospitalization.", "query": "Can I claim radiation therapy bills?", "label": "Approved"},
    {"clause": "Only allopathic treatment is eligible.", "query": "Is naturopathy covered?", "label": "Rejected"},
    {"clause": "Accidental death benefit of ₹5 lakhs is payable.", "query": "Is death due to car crash covered?", "label": "Approved"},
    {"clause": "Hearing aids are not covered.", "query": "Can I claim for hearing machine?", "label": "Rejected"},
    {"clause": "Policy covers hospitalization for malaria.", "query": "Can I claim for dengue fever hospitalization?", "label": "Approved"},
    {"clause": "Policy covers stroke rehabilitation only for 15 days.", "query": "Is 20-day rehab after stroke covered?", "label": "Rejected"},
    {"clause": "Policy covers pneumonia treatment.", "query": "Can I claim for hospital stay due to pneumonia?", "label": "Approved"},
    {"clause": "Policy covers only listed hospitals.", "query": "Can I claim for treatment in non-network hospital?", "label": "Rejected"},
    {"clause": "Only emergency hospitalization abroad is covered.", "query": "Can I claim for regular surgery abroad?", "label": "Rejected"},
    {"clause": "No claim bonus is available if no claims filed.", "query": "Will I get bonus if I didn’t claim this year?", "label": "Approved"},
    {"clause": "Policy excludes war-related injuries.", "query": "Is injury from riots covered?", "label": "Rejected"},
    {"clause": "Emergency hospitalization due to accidents abroad is covered.", "query": "Can I claim bike accident in Dubai?", "label": "Approved"},
    {"clause": "Policy excludes experimental treatments.", "query": "Is stem cell therapy reimbursed?", "label": "Rejected"},
    {"clause": "Coverage for newborn begins after 90 days.", "query": "Can I claim for newborn hospitalization at 1 month?", "label": "Rejected"},
    {"clause": "Policy covers prosthetic limbs due to accident.", "query": "Can I claim for leg prosthetic?", "label": "Approved"},
    {"clause": "Policy covers psychiatric hospitalization.", "query": "Is schizophrenia treatment covered?", "label": "Approved"},
    {"clause": "Policy excludes treatment outside India except emergency.", "query": "Can I claim for a regular checkup in USA?", "label": "Rejected"},
    {"clause": "Policy includes bone marrow transplant.", "query": "Can I claim for BMT procedure?", "label": "Approved"},
    {"clause": "Coverage includes ICU ambulance.", "query": "Is ICU-equipped ambulance bill included?", "label": "Approved"},
    {"clause": "Policy excludes elective procedures.", "query": "Is LASIK eye surgery reimbursed?", "label": "Rejected"},
    {"clause": "Policy covers dengue and chikungunya hospitalizations.", "query": "Can I claim for chikungunya hospitalization?", "label": "Approved"},
]

# Step 2: Preprocess and split
label_map = {"Approved": 1, "Rejected": 0}
texts = [f"{d['query']} [SEP] {d['clause']}" for d in train_data]
labels = [label_map[d["label"]] for d in train_data]
dataset = Dataset.from_dict({"text": texts, "label": labels}).train_test_split(test_size=0.2)
train_dataset, eval_dataset = dataset["train"], dataset["test"]

# Step 3: Tokenize
tokenizer = AutoTokenizer.from_pretrained("nreimers/MiniLMv2-L6-H384-distilled-from-BERT-base")

def tokenize(batch):
    return tokenizer(batch["text"], padding="max_length", truncation=True, max_length=128)

train_dataset = train_dataset.map(tokenize, batched=True)
eval_dataset = eval_dataset.map(tokenize, batched=True)
train_dataset.set_format("torch", columns=["input_ids", "attention_mask", "label"])
eval_dataset.set_format("torch", columns=["input_ids", "attention_mask", "label"])

# Step 4: Load Model
model = AutoModelForSequenceClassification.from_pretrained("nreimers/MiniLMv2-L6-H384-distilled-from-BERT-base", num_labels=2)

# Step 5: Define Metrics
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = torch.argmax(torch.tensor(logits), dim=1)
    acc = accuracy_score(labels, preds)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')
    return {'accuracy': acc, 'f1': f1, 'precision': precision, 'recall': recall}

# Step 6: Training Args
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=10,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=10,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=10,
    learning_rate=2e-5,
)

# Step 7: Trainer Setup
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

# Step 8: Train the model
trainer.train()

def predict(query, clause):
    input_text = f"Clause: {clause} Query: {query}"
    inputs = tokenizer(input_text, return_tensors="pt", truncation=True, padding=True)
    with torch.no_grad():
        logits = model(**inputs).logits
    predicted_class = torch.argmax(logits, dim=1).item()
    return "Approved" if predicted_class == 0 else "Rejected"

from sklearn.metrics import accuracy_score

y_pred = [predict(c["query"], c["clause"]) for c in test_cases]
y_true = [c["expected_decision"] for c in test_cases]

print("Accuracy:", accuracy_score(y_true, y_pred) * 100)

"""Deployment"""

!pip install Flask celery redis colab_everything flask pyngrok

# Step 1: Install ngrok and flask-ngrok
!pip install flask-ngrok --quiet

# Step 2: Minimal Flask App with ngrok
from flask import Flask, request, jsonify
from flask_ngrok import run_with_ngrok

app = Flask(__name__)
run_with_ngrok(app)  # ngrok tunnel auto starts

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("Webhook data received:", data)
    return jsonify({"message": "Success"}), 200

app.run()

!pip install flask pyngrok

from pyngrok import ngrok

# Paste your token here
ngrok.set_auth_token("30xwteqIIWDOR94H6UDN9GlScIF_2VX86J3fDxaiof8bUqC4k")

